// Generated by CoffeeScript 1.9.1
(function() {
  var array, getBoard, i, io, j, k, l, playerExists, port, ref, ref1, server, size;

  port = process.env.PORT || 5000;

  server = require("http").createServer(function(request, response) {
    switch (request.url) {
      case "/1234":
        response.writeHead(200, {
          "Content-Type": "text/html"
        });
        response.write(require("fs").readFileSync("index.html", "utf-8"));
        break;
      case "/client.js":
        response.writeHead(200, {
          "Content-Type": "text/javascript"
        });
        response.write(require("fs").readFileSync("client.js", "utf-8"));
    }
    response.end();
  }).listen(port, function() {
    console.log("Listening on %d", port);
  });

  playerExists = {
    "black": false,
    "white": false
  };

  io = require("socket.io").listen(server);

  io.on("connection", function(socket) {
    var color;
    if (!playerExists.black) {
      color = "black";
      playerExists.black = true;
      socket.emit("message", "You play black.");
    } else if (!playerExists.white) {
      color = "white";
      playerExists.white = true;
      socket.emit("message", "You play white.");
    } else {
      color = "audience";
      socket.emit("message", "You are audience.");
    }
    socket.emit("draw", getBoard());
    console.log("connection", color);
    socket.on("disconnect", function() {
      playerExists[color] = false;
      io.sockets.emit("message", color + " disconnected.");
      console.log("disconnect", color);
    });
    socket.on("message", function(text) {
      io.sockets.emit("message", text);
      console.log("message", text);
    });
    socket.on("click", function(i, j) {
      switch (color) {
        case "black":
          array[i][j] = "x";
          break;
        case "white":
          array[i][j] = "o";
      }
      io.sockets.emit("draw", getBoard());
    });
  });

  size = 8;

  array = [];

  for (i = k = 0, ref = size; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
    array[i] = [];
    for (j = l = 0, ref1 = size; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
      array[i][j] = ".";
    }
  }

  array[3][3] = "x";

  array[3][4] = "o";

  array[4][3] = "o";

  array[4][4] = "x";

  getBoard = function() {
    return {
      size: size,
      array: array
    };
  };

}).call(this);
